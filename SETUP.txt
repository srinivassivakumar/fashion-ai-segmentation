================================================================================
FASHION AI SEGMENTATION - COMPLETE SETUP GUIDE
================================================================================

This guide will help you set up and run the Fashion AI Segmentation system
with API key authentication after cloning the repository.

================================================================================
📁 PROJECT STRUCTURE
================================================================================

After cloning the repository, you will have the following structure:

fashion-ai-segmentation/
│
├── app/                              # Main application directory
│   ├── main.py                       # FastAPI server with web GUI and API auth
│   ├── requirements.txt              # Python dependencies
│   ├── src/                          # Source code modules
│   │   ├── segformer_sam_auto_center.py    # Main pipeline orchestrator
│   │   ├── segformer_sam_extractor.py      # Segmentation extraction logic
│   │   └── postprocess_center_crops.py     # Auto-centering algorithm
│   ├── data/models/                  # Model weights directory
│   └── outputs/                      # Processing results (auto-created)
│
├── Dockerfile                        # Docker configuration
├── README.md                         # Project documentation
└── SETUP.txt                         # This file

================================================================================
🔐 API KEY AUTHENTICATION (NEW!)
================================================================================

The API now includes API key authentication to protect upload and list endpoints
while keeping the web interface publicly accessible.

────────────────────────────────────────────────────────────────────────────────
1. GENERATING A SECURE API KEY
────────────────────────────────────────────────────────────────────────────────

Generate a secure random API key using Python:

    python -c "import secrets; print(secrets.token_urlsafe(32))"

Example output: xK9mP2nQ7wR5tY8uI1oL3aS6dF4gH0jK9mN2bV5cX8zA1sD4fG7hJ0

⚠️ IMPORTANT: Save this key securely - you'll need it to access the API.

────────────────────────────────────────────────────────────────────────────────
2. RAILWAY DEPLOYMENT SETUP (PRODUCTION)
────────────────────────────────────────────────────────────────────────────────

To deploy on Railway with API key authentication:

1. Go to your Railway dashboard: https://railway.app/dashboard
2. Select your project: fashion-ai-segmentation-production
3. Click on your service
4. Go to the "Variables" tab
5. Add a new environment variable:
   
   Variable Name:  FASHION_AI_API_KEY
   Variable Value: <your-generated-api-key>

6. Save the variable
7. Railway will automatically redeploy your service with the new configuration

────────────────────────────────────────────────────────────────────────────────
3. API ENDPOINTS
────────────────────────────────────────────────────────────────────────────────

PUBLIC ENDPOINTS (No authentication required):
    - GET  /                          - Web interface
    - GET  /results/{image_name}      - View results page
    - GET  /outputs/{path}            - Download output files

PROTECTED ENDPOINTS (Require X-API-Key header):
    - POST /upload                    - Upload and process image
    - GET  /list-outputs/{image_name} - List all output files

────────────────────────────────────────────────────────────────────────────────
4. USING THE API WITH AUTHENTICATION
────────────────────────────────────────────────────────────────────────────────

cURL Examples:

Upload an image:
    curl -X POST https://fashion-ai-segmentation-production.up.railway.app/upload \
      -H "X-API-Key: your-api-key-here" \
      -F "file=@image.jpg"

List outputs:
    curl -H "X-API-Key: your-api-key-here" \
      https://fashion-ai-segmentation-production.up.railway.app/list-outputs/temp_m_2

Download all crops:
    curl -s -H "X-API-Key: your-api-key-here" \
      http://localhost:8000/list-outputs/temp_m_2 | \
      jq -r '.files.crops[]' | \
      while read filename; do 
        echo "Downloading: $filename"
        curl -O "http://localhost:8000/outputs/$filename"
      done

Python Example:
    import requests

    API_KEY = "your-api-key-here"
    BASE_URL = "https://fashion-ai-segmentation-production.up.railway.app"

    # Upload and process image
    headers = {"X-API-Key": API_KEY}
    files = {"file": open("image.jpg", "rb")}
    response = requests.post(f"{BASE_URL}/upload", headers=headers, files=files)
    result = response.json()

    print(f"Processed: {result['image_name']}")
    print(f"Components: {result['num_components']}")

================================================================================
🔧 PREREQUISITES
================================================================================

1. Python 3.10 or higher
   - Check: python --version

2. pip (Python package manager)
   - Check: pip --version

3. Git
   - Check: git --version

4. (Optional) CUDA-capable GPU for faster processing

5. (Optional) Docker for containerized deployment

================================================================================
📥 INSTALLATION METHODS
================================================================================

────────────────────────────────────────────────────────────────────────────────
METHOD 1: DOCKER (EASIEST - RECOMMENDED)
────────────────────────────────────────────────────────────────────────────────

Step 1: Pull the Docker image
   docker pull srinivassivakumar123/fashion-ai-segmentation

Step 2: Run the container with API key
   docker run -p 8080:8080 \
     -e FASHION_AI_API_KEY="your-api-key-here" \
     srinivassivakumar123/fashion-ai-segmentation

Step 3: Open your browser
   Navigate to: http://localhost:8080

✅ DONE! The web interface is publicly accessible, but API calls need your key.

────────────────────────────────────────────────────────────────────────────────
METHOD 2: MANUAL SETUP FROM GITHUB (FOR DEVELOPERS)
────────────────────────────────────────────────────────────────────────────────

Step 1: Clone the repository
   git clone https://github.com/srinivassivakumar/fashion-ai-segmentation.git
   cd fashion-ai-segmentation

Step 2: Navigate to app directory
   cd app

Step 3: Create a virtual environment (recommended)
   # On Windows:
   python -m venv venv
   .\venv\Scripts\activate
   
   # On macOS/Linux:
   python3 -m venv venv
   source venv/bin/activate

Step 4: Install dependencies
   pip install -r requirements.txt

Step 5: Create model directory
   mkdir -p data/models

Step 6: Download SAM model weights (375 MB)
   wget https://dl.fbaipublicfiles.com/segment_anything/sam_vit_b_01ec64.pth \
     -O data/models/sam_vit_b_01ec64.pth

Step 7: Set API key and run
   # Windows PowerShell:
   $env:FASHION_AI_API_KEY="your-api-key-here"
   python main.py
   
   # Linux/Mac:
   export FASHION_AI_API_KEY="your-api-key-here"
   python main.py

   Note: If no API key is set, a temporary one will be generated and displayed.

Step 8: Open your browser
   Navigate to: http://localhost:8000

✅ DONE! The application is ready to use.

────────────────────────────────────────────────────────────────────────────────
METHOD 3: BUILD DOCKER IMAGE LOCALLY
────────────────────────────────────────────────────────────────────────────────

Step 1: Clone and build
   git clone https://github.com/srinivassivakumar/fashion-ai-segmentation.git
   cd fashion-ai-segmentation
   docker build -t fashion-ai-segmentation .

Step 2: Run with API key
   docker run -p 8080:8080 \
     -e FASHION_AI_API_KEY="your-api-key-here" \
     fashion-ai-segmentation

Step 3: Open your browser
   Navigate to: http://localhost:8080

✅ DONE!

================================================================================
🚀 USING THE APPLICATION
================================================================================

The application has two interfaces:

1. WEB INTERFACE (No API key needed)
   - Visit http://localhost:8080 in your browser
   - Upload images via drag-and-drop or file picker
   - View results and download crops

2. API INTERFACE (Requires API key)
   - POST /upload - Upload images programmatically
   - GET /list-outputs/{image_name} - List all generated files
   - See examples above for cURL and Python usage

================================================================================
📊 OUTPUT FILES EXPLAINED
================================================================================

After processing "outfit.jpg", you'll get:

1. outfit_original.jpg - Original uploaded image
2. outfit_visualization.png - Segmentation overlay
3. masks_raw/outfit_segformer_raw.png - Raw SegFormer mask
4. masks_refined/outfit_sam_refined.png - SAM-refined mask
5. crops_centered/outfit_hat_1.png - Centered hat crop
6. crops_centered/outfit_upper_clothes_2.png - Centered top
7. crops_centered/outfit_pants_4.png - Centered pants
... and so on for each detected garment

================================================================================
👕 DETECTED GARMENT CLASSES
================================================================================

The system can detect 13 fashion categories:

Class 1:  Hat
Class 2:  Upper Clothes (shirts, t-shirts, jackets, etc.)
Class 3:  Skirt
Class 4:  Pants (jeans, trousers, shorts, etc.)
Class 5:  Dress
Class 6:  Belt
Class 7:  Left Shoe
Class 8:  Right Shoe
Class 9:  Face (detected but not cropped)
Class 10: Left Leg
Class 11: Right Leg
Class 12: Left Arm
Class 13: Right Arm

Note: Only wearable items (classes 1-8) are cropped and saved.

================================================================================
❓ TROUBLESHOOTING
================================================================================

"Invalid or missing API Key" error:
    - Ensure you're passing the X-API-Key header
    - Verify the API key matches the one set in Railway/environment
    - Check that FASHION_AI_API_KEY environment variable is set

Temporary API key displayed on startup:
    - This means no API key environment variable was found
    - Set FASHION_AI_API_KEY for a persistent key

"Module not found" errors:
    - Activate virtual environment
    - Re-run: pip install -r requirements.txt

"SAM model not found":
    - Download SAM weights to app/data/models/sam_vit_b_01ec64.pth

"CUDA out of memory":
    - Application will fall back to CPU mode
    - Resize images to smaller dimensions

"Processing is very slow":
    - GPU: 2-5 seconds per image
    - CPU: 10-30 seconds per image (normal)

"Port 8080 already in use":
    - Change port: uvicorn main:app --port 8081

"No garments detected":
    - Ensure image contains visible clothing items
    - Use well-lit images with clear garments

================================================================================
🔒 SECURITY NOTES
================================================================================

- Keep your API key secure and never commit it to version control
- Rotate your API key regularly
- Use HTTPS in production (Railway provides this automatically)
- Monitor API usage through Railway logs
- Consider implementing rate limiting for heavy production use
- Web interface remains public for easy demo access
- API endpoints are protected to prevent abuse

================================================================================
📈 PERFORMANCE TIPS
================================================================================

1. Use GPU if available (5-10x faster than CPU)
2. Optimize image sizes (1024x1024 is a good balance)
3. Batch processing - reuse loaded models
4. Docker with GPU: docker run --gpus all -p 8080:8080 ...

================================================================================
📚 ADDITIONAL RESOURCES
================================================================================

- SegFormer Paper: https://arxiv.org/abs/2105.15203
- SAM Paper: https://arxiv.org/abs/2304.02643
- FastAPI Docs: https://fastapi.tiangolo.com/
- GitHub: https://github.com/srinivassivakumar/fashion-ai-segmentation

================================================================================
💬 SUPPORT
================================================================================

For issues or questions:
GitHub Issues: https://github.com/srinivassivakumar/fashion-ai-segmentation/issues

Please provide:
- Operating system and version
- Python version
- Error messages (full traceback)
- Steps to reproduce the issue

================================================================================

Happy Fashion Segmentation! 👗👔👠

================================================================================
